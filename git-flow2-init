#!/bin/bash
set -e

[[ -n "${DEBUG}" ]] && set -x

origIFS=$IFS

. git-flow2-rainbow.sh
. git-flow2-spinner.sh
. git-flow2-common.sh

trap cleanup EXIT

ACTION_REQUIRED=""

function cleanup {
  if [[ "$?" -ne "0" ]]; then
    echo
    echo "I'm bailing out. Have a nice day!"
  fi
  stop_spinner 0
}

function mark_action_required {
  ACTION_REQUIRED="true"
  echo "${__bold}>>> Action required! <<< ${__normal}"
}

BRANCHES="develop master gitflow-config"

if [[ -n "$(git diff --shortstat)" ]]; then
  echo "Your repository is one dirty dirty repository."
  echo "Please commit or stash your changes and then run me again."
  echo "Have a nice day!"
  exit 1
fi

start_spinner "Fetching from origin..."
err=$(git fetch -a 2>&1 >/dev/null) || {
  stop_spinner 1
  echo "${err}"
  exit 1
}
stop_spinner 0

echo
echored "Check Required Branches"
echo "Making sure required branches exist: ${BRANCHES}"

for branch in ${BRANCHES}; do
  if ! git checkout ${branch} >/dev/null 2>/dev/null; then
    echo
    echo "No branch '${branch}' found. Will create one for you for free."
    git checkout -b ${branch}
    git commit --allow-empty --message "Initial branch commit."
    echo
  else
    echo -n "Branch '${branch}' found. "; print_checkmark
  fi
done

echo
echo -n "Sweet, all the required branches exist! "; print_checkmark;

echo
echo "Checking out develop..."
git checkout develop >/dev/null

echo
echored "Local Config"

if ! git show gitflow-config:gitflow.yml 2>/dev/null >/dev/null; then
  mark_action_required
  echo "Please make sure there's a 'pivotal_tracker' section with "
  echo "'project_id: <PT PROJECT ID>' in 'gitflow.yml' file in branch 'gitflow-config'"
  echo "Example setting:"
  echo
  echo -e "  pivotal_tracker:\n    project_id: MY_PT_PROJECT_ID"
else
  echo -n "Looks good. "; print_checkmark
fi

echo
echored "Global Config"

if [[ ! -f "${HOME}/.gitflow.yml" ]]; then
  mark_action_required
  echo "I can't find the file '${HOME}/.gitflow.yml'."
  echo "No hard feelings but I need it. So please create it."
  echo "And make sure there's a 'pivotal_tracker' section with 'token' property "
  echo "that has your Pivotal Tracker API token as the value."
  echo "Example setting: "
  echo
  echo -e "  pivotal_tracker:\n    token: MY_PT_API_TOKEN"
else
  echo -n "Looks good. "; print_checkmark
fi


echo
echored "Git Commit Hook"

root="$(git rev-parse --show-toplevel)"
hook_path="$root/.git/hooks/commit-msg"
hook_executable="$(which git-flow2-commit-msg-hook)"

if [ -e "$hook_path" ]; then
  set +e
  diff "$hook_path" "$hook_executable" 1>/dev/null
  ret="$?"
  set -e
  if [ "$ret" -eq 2 ]; then
    # Ask the user for confirmation.
    echo "Your git commit-msg workflow hook is not up to date."
    read -p "Shall we proceed and replace the current hook with the new one? [y/N]: " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo
      mark_action_required
      echo "I need the hook in order to do my job. So I will exit now."
      exit 1
    fi
    echo
    echo "Installing the workflow git commit-msg hook..."
    echo
    cp "$hook_executable" "$hook_path"
    echo
    echo -n "Git hook installed. "; print_checkmark
  elif [ "$ret" -ne 0 ]; then
    exit "$ret"
  else
    echo -n "Looks good. "; print_checkmark
  fi
else
  echo "Installing the workflow git commit-msg hook..."
  cp "$hook_executable" "$hook_path"
  echo
  echo -n "Git hook installed. "; print_checkmark
fi

if [[ -n "${ACTION_REQUIRED}" ]]; then
  echo "Some required settings were not in place."
  echo "Please fix that and run me again!"
  exit 1
else
  git config ${GIT_CFG_INITIALIZED} true 
fi
